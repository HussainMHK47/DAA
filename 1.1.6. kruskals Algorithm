#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#define INF 9999
#define MAX_EDGES 100
typedef struct {
		int u,v,weight;
}Edge;

int compareEdges(const void *a, const void *b){
	Edge *e1 = (Edge *)a;
	Edge *e2 = (Edge *)b;
	if(e1-> weight != e2->weight)
		return e1->weight - e2->weight;

	if(e1->u != e2->u)
		return e1->u - e2->u;

	return e1->v - e2->v;
}

int find(int parent[], int i) {
	if(parent[i] !=i){
		parent[i] = find(parent, parent[i]);
	}
	return parent[i];
}

void unionSet(int parent[], int rank[], int x, int y) {
	int xroot = find(parent, x);
	int yroot = find(parent, y);
	
	
	// Write your code here...
	if(rank[xroot] < rank[yroot]){
		parent[xroot] = yroot;
	}else if (rank[xroot]> rank[yroot]){
		parent[yroot] = xroot;
	}else{
		parent[yroot] = xroot;
		rank[xroot]++;
	}
}

void kruskalMST(int **cost, int V) {

	// Write your code here...
	Edge edges[MAX_EDGES];
	int edgeCount = 0;

	for(int i = 0; i < V; i++){
		for(int j = i + 1; j < V; j++){
			if (cost[i][j] != INF) {
				edges[edgeCount].u = i;
				edges[edgeCount].v = j;
				edges[edgeCount].weight = cost[i][j];
				edgeCount++;
				}
			}
		}
		qsort(edges, edgeCount, sizeof(Edge), compareEdges);
	
for (int i = 0; i< edgeCount - 1; i++){
	
}

	int parent[V], rank[V];
	for(int i = 0; i < V; i++){
		parent[i] = i;
		rank[i] = 0;
	
}

int totalCost = 0;
int e = 0;
for (int i = 0, e=0; e < V - 1 && i< edgeCount ; i++){
	int u = edges[i].u;
	int v = edges[i].v;

	int setU = find(parent, u);
	int setV = find(parent, v);

	if(setU != setV){
		printf("Edge %d:(%d, %d) cost:%d\n", e, edges[i].u, edges[i].v,edges[i].weight);
		totalCost += edges[i].weight;
		unionSet(parent, rank, setU, setV);
		e++;
	}
}
	printf("Minimum cost= %d\n", totalCost);
}

int main() {
    int V;
    printf("No of vertices: ");
    scanf("%d", &V);

    int **cost = (int **)malloc(V * sizeof(int *));
    for (int i = 0; i < V; i++)
        cost[i] = (int *)malloc(V * sizeof(int));

    printf("Adjacency matrix:\n");
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            scanf("%d", &cost[i][j]);

    kruskalMST(cost, V);

    for (int i = 0; i < V; i++)
        free(cost[i]);
    free(cost);

    return 0;
}

