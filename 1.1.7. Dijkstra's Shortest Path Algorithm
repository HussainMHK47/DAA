#include <limits.h> 
#include <stdio.h>
#define MAX 20
int V, E;
int graph[MAX][MAX];
#define INFINITY 99999
void printPath(int parent[], int j);
void dijkstra(int G[MAX][MAX], int n, int startnode) {
	int dist[MAX], visited[MAX], parent[MAX];
	int i, count;

	for(i = 1; i<=n; i++){
		dist[i] = INFINITY;
		visited[i] = 0;
		parent[i] = -1;
	}
	dist[startnode]= 0;

	for(count = 1; count <= n-1; count++){
		int min =INFINITY, u = -1;

		for(int v = 1; v<=n; v++){
			if(!visited[v] && dist[v] < min){
				min = dist[v];
				u=v;
			}
		}
		if(u == -1) break;

		visited[u] = 1;

		for(int v =1; v <=n; v++){
			if(G[u][v] > 0 && !visited[v] && dist[u] + G[u][v] < dist[v]){
				dist[v] = dist[u] + G[u][v];
				parent[v] = u;
			}
		}
	}

	printf("Node\tDistance\tPath\n");
	for(i = 1; i<=n; i++){
		if(i == startnode) continue;
		if(dist[i] == INFINITY){
			printf("%4d\t%8s\t%s\n", i, "INF","NO PATH");
			
		}else{
			printf("%4d\t%8d\t", i, dist[i]);
			printPath(parent, i);
			printf("\n");
		}
	}
}




void printPath(int parent[], int j){
	if(j == -1) return;
	printf("%d", j);
	if(parent[j] != -1){
		printf("<-");
		printPath(parent, parent[j]);
	}













	
	// write your code here
	
}
int main() { 
	int s, d, w, i, j;
	printf("Enter the number of vertices : ");
	scanf("%d", &V);
	printf("Enter the number of edges : ");
	scanf("%d", &E);
	for(i = 1 ; i <= V; i++) {
		for(j = 1; j <= V; j++) {
			graph[i][i] = 0;
		}
	}
	for(i = 1; i <= E; i++) {
		printf("Enter source : ");
		scanf("%d", &s);
		printf("Enter destination : ");
		scanf("%d", &d);
		printf("Enter weight : ");
		scanf("%d", &w);
		if(s > V || d > V || s <= 0 || d <= 0) {
			printf("Invalid index. Try again.\n");
			i--;
			continue;
		} else {
			graph[s][d] = w;
		}
	}
	printf("Enter the source :");
	scanf("%d", &s);
	dijkstra(graph, V, s); 
	return 0; 
} 
